// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package seminar.import_stat_raw_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: import_stat_raw Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class import_stat_raw implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(datafolder != null){
				
					this.setProperty("datafolder", datafolder.toString());
				
			}
			
		}

public String datafolder;
public String getDatafolder(){
	return this.datafolder;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "import_stat_raw";
	private final String projectName = "SEMINAR";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				import_stat_raw.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(import_stat_raw.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputJSON_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_SEMINAR_import_stat_raw = new byte[0];
    static byte[] commonByteArray_SEMINAR_import_stat_raw = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String index;

				public String getIndex () {
					return this.index;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public Integer score;

				public Integer getScore () {
					return this.score;
				}
				
			    public Integer response_code;

				public Integer getResponse_code () {
					return this.response_code;
				}
				
			    public String target_environment;

				public String getTarget_environment () {
					return this.target_environment;
				}
				
			    public String threed_status;

				public String getThreed_status () {
					return this.threed_status;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public Integer authorization_eci;

				public Integer getAuthorization_eci () {
					return this.authorization_eci;
				}
				
			    public Long merchant_id;

				public Long getMerchant_id () {
					return this.merchant_id;
				}
				
			    public Long client_id;

				public Long getClient_id () {
					return this.client_id;
				}
				
			    public String currency_code;

				public String getCurrency_code () {
					return this.currency_code;
				}
				
			    public String payment_means_brand;

				public String getPayment_means_brand () {
					return this.payment_means_brand;
				}
				
			    public String path;

				public String getPath () {
					return this.path;
				}
				
			    public String trace_type;

				public String getTrace_type () {
					return this.trace_type;
				}
				
			    public Integer date_num;

				public Integer getDate_num () {
					return this.date_num;
				}
				
			    public Integer original_amount;

				public Integer getOriginal_amount () {
					return this.original_amount;
				}
				
			    public Integer version;

				public Integer getVersion () {
					return this.version;
				}
				
			    public String host;

				public String getHost () {
					return this.host;
				}
				
			    public String card_iin;

				public String getCard_iin () {
					return this.card_iin;
				}
				
			    public Long client_alias;

				public Long getClient_alias () {
					return this.client_alias;
				}
				
			    public Integer acquirer_response_code;

				public Integer getAcquirer_response_code () {
					return this.acquirer_response_code;
				}
				
			    public Integer acquirer_response_delay;

				public Integer getAcquirer_response_delay () {
					return this.acquirer_response_delay;
				}
				
			    public String timestamp;

				public String getTimestamp () {
					return this.timestamp;
				}
				
			    public String transaction_id;

				public String getTransaction_id () {
					return this.transaction_id;
				}
				
			    public String service_name;

				public String getService_name () {
					return this.service_name;
				}
				
			    public Integer target_authorization_center;

				public Integer getTarget_authorization_center () {
					return this.target_authorization_center;
				}
				
			    public String native_response_code;

				public String getNative_response_code () {
					return this.native_response_code;
				}
				
			    public String operation_name;

				public String getOperation_name () {
					return this.operation_name;
				}
				
			    public Long merchant_alias;

				public Long getMerchant_alias () {
					return this.merchant_alias;
				}
				
			    public String timestamp2;

				public String getTimestamp2 () {
					return this.timestamp2;
				}
				
			    public String connector;

				public String getConnector () {
					return this.connector;
				}
				
			    public String application;

				public String getApplication () {
					return this.application;
				}
				
			    public Integer service;

				public Integer getService () {
					return this.service;
				}
				
			    public String merchant_country;

				public String getMerchant_country () {
					return this.merchant_country;
				}
				
			    public String csc_indicator;

				public String getCsc_indicator () {
					return this.csc_indicator;
				}
				
			    public Integer time;

				public Integer getTime () {
					return this.time;
				}
				
			    public String acquirer_response_label;

				public String getAcquirer_response_label () {
					return this.acquirer_response_label;
				}
				
			    public String real_authorization_center;

				public String getReal_authorization_center () {
					return this.real_authorization_center;
				}
				
			    public String response_label;

				public String getResponse_label () {
					return this.response_label;
				}
				
			    public Integer amount;

				public Integer getAmount () {
					return this.amount;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.index = this.index;
	            other.type = this.type;
	            other.id = this.id;
	            other.score = this.score;
	            other.response_code = this.response_code;
	            other.target_environment = this.target_environment;
	            other.threed_status = this.threed_status;
	            other.pid = this.pid;
	            other.authorization_eci = this.authorization_eci;
	            other.merchant_id = this.merchant_id;
	            other.client_id = this.client_id;
	            other.currency_code = this.currency_code;
	            other.payment_means_brand = this.payment_means_brand;
	            other.path = this.path;
	            other.trace_type = this.trace_type;
	            other.date_num = this.date_num;
	            other.original_amount = this.original_amount;
	            other.version = this.version;
	            other.host = this.host;
	            other.card_iin = this.card_iin;
	            other.client_alias = this.client_alias;
	            other.acquirer_response_code = this.acquirer_response_code;
	            other.acquirer_response_delay = this.acquirer_response_delay;
	            other.timestamp = this.timestamp;
	            other.transaction_id = this.transaction_id;
	            other.service_name = this.service_name;
	            other.target_authorization_center = this.target_authorization_center;
	            other.native_response_code = this.native_response_code;
	            other.operation_name = this.operation_name;
	            other.merchant_alias = this.merchant_alias;
	            other.timestamp2 = this.timestamp2;
	            other.connector = this.connector;
	            other.application = this.application;
	            other.service = this.service;
	            other.merchant_country = this.merchant_country;
	            other.csc_indicator = this.csc_indicator;
	            other.time = this.time;
	            other.acquirer_response_label = this.acquirer_response_label;
	            other.real_authorization_center = this.real_authorization_center;
	            other.response_label = this.response_label;
	            other.amount = this.amount;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SEMINAR_import_stat_raw.length) {
				if(length < 1024 && commonByteArray_SEMINAR_import_stat_raw.length == 0) {
   					commonByteArray_SEMINAR_import_stat_raw = new byte[1024];
				} else {
   					commonByteArray_SEMINAR_import_stat_raw = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SEMINAR_import_stat_raw, 0, length);
			strReturn = new String(commonByteArray_SEMINAR_import_stat_raw, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SEMINAR_import_stat_raw) {

        	try {

        		int length = 0;
		
					this.index = readString(dis);
					
					this.type = readString(dis);
					
					this.id = readString(dis);
					
						this.score = readInteger(dis);
					
						this.response_code = readInteger(dis);
					
					this.target_environment = readString(dis);
					
					this.threed_status = readString(dis);
					
					this.pid = readString(dis);
					
						this.authorization_eci = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.merchant_id = null;
           				} else {
           			    	this.merchant_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.client_id = null;
           				} else {
           			    	this.client_id = dis.readLong();
           				}
					
					this.currency_code = readString(dis);
					
					this.payment_means_brand = readString(dis);
					
					this.path = readString(dis);
					
					this.trace_type = readString(dis);
					
						this.date_num = readInteger(dis);
					
						this.original_amount = readInteger(dis);
					
						this.version = readInteger(dis);
					
					this.host = readString(dis);
					
					this.card_iin = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.client_alias = null;
           				} else {
           			    	this.client_alias = dis.readLong();
           				}
					
						this.acquirer_response_code = readInteger(dis);
					
						this.acquirer_response_delay = readInteger(dis);
					
					this.timestamp = readString(dis);
					
					this.transaction_id = readString(dis);
					
					this.service_name = readString(dis);
					
						this.target_authorization_center = readInteger(dis);
					
					this.native_response_code = readString(dis);
					
					this.operation_name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.merchant_alias = null;
           				} else {
           			    	this.merchant_alias = dis.readLong();
           				}
					
					this.timestamp2 = readString(dis);
					
					this.connector = readString(dis);
					
					this.application = readString(dis);
					
						this.service = readInteger(dis);
					
					this.merchant_country = readString(dis);
					
					this.csc_indicator = readString(dis);
					
						this.time = readInteger(dis);
					
					this.acquirer_response_label = readString(dis);
					
					this.real_authorization_center = readString(dis);
					
					this.response_label = readString(dis);
					
						this.amount = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.index,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.id,dos);
					
					// Integer
				
						writeInteger(this.score,dos);
					
					// Integer
				
						writeInteger(this.response_code,dos);
					
					// String
				
						writeString(this.target_environment,dos);
					
					// String
				
						writeString(this.threed_status,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// Integer
				
						writeInteger(this.authorization_eci,dos);
					
					// Long
				
						if(this.merchant_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.merchant_id);
		            	}
					
					// Long
				
						if(this.client_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.client_id);
		            	}
					
					// String
				
						writeString(this.currency_code,dos);
					
					// String
				
						writeString(this.payment_means_brand,dos);
					
					// String
				
						writeString(this.path,dos);
					
					// String
				
						writeString(this.trace_type,dos);
					
					// Integer
				
						writeInteger(this.date_num,dos);
					
					// Integer
				
						writeInteger(this.original_amount,dos);
					
					// Integer
				
						writeInteger(this.version,dos);
					
					// String
				
						writeString(this.host,dos);
					
					// String
				
						writeString(this.card_iin,dos);
					
					// Long
				
						if(this.client_alias == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.client_alias);
		            	}
					
					// Integer
				
						writeInteger(this.acquirer_response_code,dos);
					
					// Integer
				
						writeInteger(this.acquirer_response_delay,dos);
					
					// String
				
						writeString(this.timestamp,dos);
					
					// String
				
						writeString(this.transaction_id,dos);
					
					// String
				
						writeString(this.service_name,dos);
					
					// Integer
				
						writeInteger(this.target_authorization_center,dos);
					
					// String
				
						writeString(this.native_response_code,dos);
					
					// String
				
						writeString(this.operation_name,dos);
					
					// Long
				
						if(this.merchant_alias == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.merchant_alias);
		            	}
					
					// String
				
						writeString(this.timestamp2,dos);
					
					// String
				
						writeString(this.connector,dos);
					
					// String
				
						writeString(this.application,dos);
					
					// Integer
				
						writeInteger(this.service,dos);
					
					// String
				
						writeString(this.merchant_country,dos);
					
					// String
				
						writeString(this.csc_indicator,dos);
					
					// Integer
				
						writeInteger(this.time,dos);
					
					// String
				
						writeString(this.acquirer_response_label,dos);
					
					// String
				
						writeString(this.real_authorization_center,dos);
					
					// String
				
						writeString(this.response_label,dos);
					
					// Integer
				
						writeInteger(this.amount,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("index="+index);
		sb.append(",type="+type);
		sb.append(",id="+id);
		sb.append(",score="+String.valueOf(score));
		sb.append(",response_code="+String.valueOf(response_code));
		sb.append(",target_environment="+target_environment);
		sb.append(",threed_status="+threed_status);
		sb.append(",pid="+pid);
		sb.append(",authorization_eci="+String.valueOf(authorization_eci));
		sb.append(",merchant_id="+String.valueOf(merchant_id));
		sb.append(",client_id="+String.valueOf(client_id));
		sb.append(",currency_code="+currency_code);
		sb.append(",payment_means_brand="+payment_means_brand);
		sb.append(",path="+path);
		sb.append(",trace_type="+trace_type);
		sb.append(",date_num="+String.valueOf(date_num));
		sb.append(",original_amount="+String.valueOf(original_amount));
		sb.append(",version="+String.valueOf(version));
		sb.append(",host="+host);
		sb.append(",card_iin="+card_iin);
		sb.append(",client_alias="+String.valueOf(client_alias));
		sb.append(",acquirer_response_code="+String.valueOf(acquirer_response_code));
		sb.append(",acquirer_response_delay="+String.valueOf(acquirer_response_delay));
		sb.append(",timestamp="+timestamp);
		sb.append(",transaction_id="+transaction_id);
		sb.append(",service_name="+service_name);
		sb.append(",target_authorization_center="+String.valueOf(target_authorization_center));
		sb.append(",native_response_code="+native_response_code);
		sb.append(",operation_name="+operation_name);
		sb.append(",merchant_alias="+String.valueOf(merchant_alias));
		sb.append(",timestamp2="+timestamp2);
		sb.append(",connector="+connector);
		sb.append(",application="+application);
		sb.append(",service="+String.valueOf(service));
		sb.append(",merchant_country="+merchant_country);
		sb.append(",csc_indicator="+csc_indicator);
		sb.append(",time="+String.valueOf(time));
		sb.append(",acquirer_response_label="+acquirer_response_label);
		sb.append(",real_authorization_center="+real_authorization_center);
		sb.append(",response_label="+response_label);
		sb.append(",amount="+String.valueOf(amount));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SEMINAR_import_stat_raw = new byte[0];
    static byte[] commonByteArray_SEMINAR_import_stat_raw = new byte[0];

	
			    public String _index;

				public String get_index () {
					return this._index;
				}
				
			    public String _type;

				public String get_type () {
					return this._type;
				}
				
			    public String _id;

				public String get_id () {
					return this._id;
				}
				
			    public String _score;

				public String get_score () {
					return this._score;
				}
				
			    public String response_code;

				public String getResponse_code () {
					return this.response_code;
				}
				
			    public String target_environment;

				public String getTarget_environment () {
					return this.target_environment;
				}
				
			    public String threed_status;

				public String getThreed_status () {
					return this.threed_status;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String authorization_eci;

				public String getAuthorization_eci () {
					return this.authorization_eci;
				}
				
			    public String merchant_id;

				public String getMerchant_id () {
					return this.merchant_id;
				}
				
			    public String source_type;

				public String getSource_type () {
					return this.source_type;
				}
				
			    public String client_id;

				public String getClient_id () {
					return this.client_id;
				}
				
			    public String currency_code;

				public String getCurrency_code () {
					return this.currency_code;
				}
				
			    public String payment_means_brand;

				public String getPayment_means_brand () {
					return this.payment_means_brand;
				}
				
			    public String source_path;

				public String getSource_path () {
					return this.source_path;
				}
				
			    public String trace_type;

				public String getTrace_type () {
					return this.trace_type;
				}
				
			    public String date_num;

				public String getDate_num () {
					return this.date_num;
				}
				
			    public String original_amount;

				public String getOriginal_amount () {
					return this.original_amount;
				}
				
			    public String source_version;

				public String getSource_version () {
					return this.source_version;
				}
				
			    public String host;

				public String getHost () {
					return this.host;
				}
				
			    public String card_iin;

				public String getCard_iin () {
					return this.card_iin;
				}
				
			    public String client_alias;

				public String getClient_alias () {
					return this.client_alias;
				}
				
			    public String acquirer_response_code;

				public String getAcquirer_response_code () {
					return this.acquirer_response_code;
				}
				
			    public String acquirer_response_delay;

				public String getAcquirer_response_delay () {
					return this.acquirer_response_delay;
				}
				
			    public String source_timestamp;

				public String getSource_timestamp () {
					return this.source_timestamp;
				}
				
			    public String transaction_id;

				public String getTransaction_id () {
					return this.transaction_id;
				}
				
			    public String amount;

				public String getAmount () {
					return this.amount;
				}
				
			    public String authorization_id;

				public String getAuthorization_id () {
					return this.authorization_id;
				}
				
			    public String service_name;

				public String getService_name () {
					return this.service_name;
				}
				
			    public String target_authorization_center;

				public String getTarget_authorization_center () {
					return this.target_authorization_center;
				}
				
			    public String native_response_code;

				public String getNative_response_code () {
					return this.native_response_code;
				}
				
			    public String source_message;

				public String getSource_message () {
					return this.source_message;
				}
				
			    public String source_tags;

				public String getSource_tags () {
					return this.source_tags;
				}
				
			    public String operation_name;

				public String getOperation_name () {
					return this.operation_name;
				}
				
			    public String merchant_alias;

				public String getMerchant_alias () {
					return this.merchant_alias;
				}
				
			    public String source_timestamp2;

				public String getSource_timestamp2 () {
					return this.source_timestamp2;
				}
				
			    public String source_connector;

				public String getSource_connector () {
					return this.source_connector;
				}
				
			    public String source_application;

				public String getSource_application () {
					return this.source_application;
				}
				
			    public String source_service;

				public String getSource_service () {
					return this.source_service;
				}
				
			    public String merchant_country;

				public String getMerchant_country () {
					return this.merchant_country;
				}
				
			    public String csc_indicator;

				public String getCsc_indicator () {
					return this.csc_indicator;
				}
				
			    public String source_time;

				public String getSource_time () {
					return this.source_time;
				}
				
			    public String acquirer_response_label;

				public String getAcquirer_response_label () {
					return this.acquirer_response_label;
				}
				
			    public String real_authorization_center;

				public String getReal_authorization_center () {
					return this.real_authorization_center;
				}
				
			    public String response_label;

				public String getResponse_label () {
					return this.response_label;
				}
				
			    public String acquirer_message;

				public String getAcquirer_message () {
					return this.acquirer_message;
				}
				
			    public String network_data;

				public String getNetwork_data () {
					return this.network_data;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SEMINAR_import_stat_raw.length) {
				if(length < 1024 && commonByteArray_SEMINAR_import_stat_raw.length == 0) {
   					commonByteArray_SEMINAR_import_stat_raw = new byte[1024];
				} else {
   					commonByteArray_SEMINAR_import_stat_raw = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SEMINAR_import_stat_raw, 0, length);
			strReturn = new String(commonByteArray_SEMINAR_import_stat_raw, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SEMINAR_import_stat_raw) {

        	try {

        		int length = 0;
		
					this._index = readString(dis);
					
					this._type = readString(dis);
					
					this._id = readString(dis);
					
					this._score = readString(dis);
					
					this.response_code = readString(dis);
					
					this.target_environment = readString(dis);
					
					this.threed_status = readString(dis);
					
					this.pid = readString(dis);
					
					this.authorization_eci = readString(dis);
					
					this.merchant_id = readString(dis);
					
					this.source_type = readString(dis);
					
					this.client_id = readString(dis);
					
					this.currency_code = readString(dis);
					
					this.payment_means_brand = readString(dis);
					
					this.source_path = readString(dis);
					
					this.trace_type = readString(dis);
					
					this.date_num = readString(dis);
					
					this.original_amount = readString(dis);
					
					this.source_version = readString(dis);
					
					this.host = readString(dis);
					
					this.card_iin = readString(dis);
					
					this.client_alias = readString(dis);
					
					this.acquirer_response_code = readString(dis);
					
					this.acquirer_response_delay = readString(dis);
					
					this.source_timestamp = readString(dis);
					
					this.transaction_id = readString(dis);
					
					this.amount = readString(dis);
					
					this.authorization_id = readString(dis);
					
					this.service_name = readString(dis);
					
					this.target_authorization_center = readString(dis);
					
					this.native_response_code = readString(dis);
					
					this.source_message = readString(dis);
					
					this.source_tags = readString(dis);
					
					this.operation_name = readString(dis);
					
					this.merchant_alias = readString(dis);
					
					this.source_timestamp2 = readString(dis);
					
					this.source_connector = readString(dis);
					
					this.source_application = readString(dis);
					
					this.source_service = readString(dis);
					
					this.merchant_country = readString(dis);
					
					this.csc_indicator = readString(dis);
					
					this.source_time = readString(dis);
					
					this.acquirer_response_label = readString(dis);
					
					this.real_authorization_center = readString(dis);
					
					this.response_label = readString(dis);
					
					this.acquirer_message = readString(dis);
					
					this.network_data = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._index,dos);
					
					// String
				
						writeString(this._type,dos);
					
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this._score,dos);
					
					// String
				
						writeString(this.response_code,dos);
					
					// String
				
						writeString(this.target_environment,dos);
					
					// String
				
						writeString(this.threed_status,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.authorization_eci,dos);
					
					// String
				
						writeString(this.merchant_id,dos);
					
					// String
				
						writeString(this.source_type,dos);
					
					// String
				
						writeString(this.client_id,dos);
					
					// String
				
						writeString(this.currency_code,dos);
					
					// String
				
						writeString(this.payment_means_brand,dos);
					
					// String
				
						writeString(this.source_path,dos);
					
					// String
				
						writeString(this.trace_type,dos);
					
					// String
				
						writeString(this.date_num,dos);
					
					// String
				
						writeString(this.original_amount,dos);
					
					// String
				
						writeString(this.source_version,dos);
					
					// String
				
						writeString(this.host,dos);
					
					// String
				
						writeString(this.card_iin,dos);
					
					// String
				
						writeString(this.client_alias,dos);
					
					// String
				
						writeString(this.acquirer_response_code,dos);
					
					// String
				
						writeString(this.acquirer_response_delay,dos);
					
					// String
				
						writeString(this.source_timestamp,dos);
					
					// String
				
						writeString(this.transaction_id,dos);
					
					// String
				
						writeString(this.amount,dos);
					
					// String
				
						writeString(this.authorization_id,dos);
					
					// String
				
						writeString(this.service_name,dos);
					
					// String
				
						writeString(this.target_authorization_center,dos);
					
					// String
				
						writeString(this.native_response_code,dos);
					
					// String
				
						writeString(this.source_message,dos);
					
					// String
				
						writeString(this.source_tags,dos);
					
					// String
				
						writeString(this.operation_name,dos);
					
					// String
				
						writeString(this.merchant_alias,dos);
					
					// String
				
						writeString(this.source_timestamp2,dos);
					
					// String
				
						writeString(this.source_connector,dos);
					
					// String
				
						writeString(this.source_application,dos);
					
					// String
				
						writeString(this.source_service,dos);
					
					// String
				
						writeString(this.merchant_country,dos);
					
					// String
				
						writeString(this.csc_indicator,dos);
					
					// String
				
						writeString(this.source_time,dos);
					
					// String
				
						writeString(this.acquirer_response_label,dos);
					
					// String
				
						writeString(this.real_authorization_center,dos);
					
					// String
				
						writeString(this.response_label,dos);
					
					// String
				
						writeString(this.acquirer_message,dos);
					
					// String
				
						writeString(this.network_data,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_index="+_index);
		sb.append(",_type="+_type);
		sb.append(",_id="+_id);
		sb.append(",_score="+_score);
		sb.append(",response_code="+response_code);
		sb.append(",target_environment="+target_environment);
		sb.append(",threed_status="+threed_status);
		sb.append(",pid="+pid);
		sb.append(",authorization_eci="+authorization_eci);
		sb.append(",merchant_id="+merchant_id);
		sb.append(",source_type="+source_type);
		sb.append(",client_id="+client_id);
		sb.append(",currency_code="+currency_code);
		sb.append(",payment_means_brand="+payment_means_brand);
		sb.append(",source_path="+source_path);
		sb.append(",trace_type="+trace_type);
		sb.append(",date_num="+date_num);
		sb.append(",original_amount="+original_amount);
		sb.append(",source_version="+source_version);
		sb.append(",host="+host);
		sb.append(",card_iin="+card_iin);
		sb.append(",client_alias="+client_alias);
		sb.append(",acquirer_response_code="+acquirer_response_code);
		sb.append(",acquirer_response_delay="+acquirer_response_delay);
		sb.append(",source_timestamp="+source_timestamp);
		sb.append(",transaction_id="+transaction_id);
		sb.append(",amount="+amount);
		sb.append(",authorization_id="+authorization_id);
		sb.append(",service_name="+service_name);
		sb.append(",target_authorization_center="+target_authorization_center);
		sb.append(",native_response_code="+native_response_code);
		sb.append(",source_message="+source_message);
		sb.append(",source_tags="+source_tags);
		sb.append(",operation_name="+operation_name);
		sb.append(",merchant_alias="+merchant_alias);
		sb.append(",source_timestamp2="+source_timestamp2);
		sb.append(",source_connector="+source_connector);
		sb.append(",source_application="+source_application);
		sb.append(",source_service="+source_service);
		sb.append(",merchant_country="+merchant_country);
		sb.append(",csc_indicator="+csc_indicator);
		sb.append(",source_time="+source_time);
		sb.append(",acquirer_response_label="+acquirer_response_label);
		sb.append(",real_authorization_center="+real_authorization_center);
		sb.append(",response_label="+response_label);
		sb.append(",acquirer_message="+acquirer_message);
		sb.append(",network_data="+network_data);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();



	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputJSON_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = context.datafolder;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("file_stat_*.json");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputJSON_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputJSON_1);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
    dbschema_tDBOutput_1 = "";
    String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";
	
    java.lang.Class.forName(driverClass_tDBOutput_1);
    String port_tDBOutput_1 = "1433";
    String dbname_tDBOutput_1 = "CTSeminar2018" ;
    String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "PC-CUBI" ; 
    if (!"".equals(port_tDBOutput_1)) {
    	url_tDBOutput_1 += ":" + "1433";
    }
    if (!"".equals(dbname_tDBOutput_1)) {
				url_tDBOutput_1 += "//" + "CTSeminar2018"; 
	
    }
    url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_1 = "sa";

 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("19902c2a02e06304c4a45d7630b6b4c4");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;	
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
		resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
	
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "stat_raw";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "stat_raw";
}
	int count_tDBOutput_1=0;

                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    try {
                                        isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]" );
                                        whetherExist_tDBOutput_1 = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_tDBOutput_1 = false;
                                    }
                                }
                                if(!whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1 + "]([index] NCHAR(100)  ,[type] NCHAR(100)  ,[id] NCHAR(100)   not null ,[score] INT ,[response_code] INT ,[target_environment] NCHAR(100)  ,[threed_status] NCHAR(100)  ,[pid] NCHAR(100)  ,[authorization_eci] INT ,[merchant_id] BIGINT ,[client_id] BIGINT ,[currency_code] NCHAR(100)  ,[payment_means_brand] NCHAR(100)  ,[path] NCHAR(100)  ,[trace_type] NCHAR(100)  ,[date_num] INT ,[original_amount] INT ,[version] INT ,[host] NCHAR(100)  ,[card_iin] NCHAR(100)  ,[client_alias] BIGINT ,[acquirer_response_code] INT ,[acquirer_response_delay] INT ,[timestamp] NCHAR(100)  ,[transaction_id] NCHAR(100)  ,[service_name] NCHAR(100)  ,[target_authorization_center] INT ,[native_response_code] NCHAR(100)  ,[operation_name] NCHAR(100)  ,[merchant_alias] BIGINT ,[timestamp2] NCHAR(100)  ,[connector] NCHAR(100)  ,[application] NCHAR(100)  ,[service] INT ,[merchant_country] NCHAR(100)  ,[csc_indicator] NCHAR(100)  ,[time] INT ,[acquirer_response_label] NCHAR(100)  ,[real_authorization_center] NCHAR(100)  ,[response_label] NCHAR(100)  ,[amount] INT ,primary key([id]))");
                                    }
                                }
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([index],[type],[id],[score],[response_code],[target_environment],[threed_status],[pid],[authorization_eci],[merchant_id],[client_id],[currency_code],[payment_means_brand],[path],[trace_type],[date_num],[original_amount],[version],[host],[card_iin],[client_alias],[acquirer_response_code],[acquirer_response_delay],[timestamp],[transaction_id],[service_name],[target_authorization_center],[native_response_code],[operation_name],[merchant_alias],[timestamp2],[connector],[application],[service],[merchant_country],[csc_indicator],[time],[acquirer_response_label],[real_authorization_center],[response_label],[amount]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
row2Struct row2_tmp = new row2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputJSON_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputJSON_1", false);
		start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputJSON_1";

	
		int tos_count_tFileInputJSON_1 = 0;
		

	
class JsonPathCache_tFileInputJSON_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

int nb_line_tFileInputJSON_1 = 0;

JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

String loopPath_tFileInputJSON_1 = "$[*]";
java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

java.io.InputStream is_tFileInputJSON_1 = null;
com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
Object filenameOrStream_tFileInputJSON_1 = null;
        try {
            filenameOrStream_tFileInputJSON_1 = ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));
        } catch(java.lang.Exception e_tFileInputJSON_1) {
				
	            System.err.println(e_tFileInputJSON_1.getMessage());
        }
        
try {
     if(filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream){
         is_tFileInputJSON_1 = (java.io.InputStream)filenameOrStream_tFileInputJSON_1;
     }else{
	    
	        is_tFileInputJSON_1 = new java.io.FileInputStream((String)filenameOrStream_tFileInputJSON_1);
	    
	 }
	
	
	com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = parseContext_tFileInputJSON_1.parse(is_tFileInputJSON_1,"UTF-8");
	com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(loopPath_tFileInputJSON_1);
	Object result_tFileInputJSON_1 = document_tFileInputJSON_1.read(compiledLoopPath_tFileInputJSON_1,net.minidev.json.JSONObject.class);
	if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
		resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
	} else {
		resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
	}
} catch (java.lang.Exception e_tFileInputJSON_1) {
	System.err.println(e_tFileInputJSON_1.getMessage());
} finally {
	if(is_tFileInputJSON_1 != null) {
		is_tFileInputJSON_1.close();
	}
}

String jsonPath_tFileInputJSON_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

Object value_tFileInputJSON_1 = null;
for(Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
	nb_line_tFileInputJSON_1++;
			row1 = null;			
	boolean whetherReject_tFileInputJSON_1 = false;
	row1 = new row1Struct();
	
	try{
				jsonPath_tFileInputJSON_1 = "_index";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1._index = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1._index = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_type";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1._type = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1._type = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_id";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1._id = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1._id = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_score";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1._score = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1._score = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.response_code";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.response_code = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.response_code = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.target_environment";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.target_environment = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.target_environment = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.threed_status";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.threed_status = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.threed_status = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.pid";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.pid = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.pid = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.authorization_eci";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.authorization_eci = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.authorization_eci = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.merchant_id";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.merchant_id = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.merchant_id = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.type";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_type = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_type = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.client_id";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.client_id = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.client_id = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.currency_code";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.currency_code = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.currency_code = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.payment_means_brand";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.payment_means_brand = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.payment_means_brand = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.path";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_path = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_path = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.trace_type";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.trace_type = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.trace_type = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.date_num";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.date_num = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.date_num = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.original_amount";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.original_amount = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.original_amount = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.@version";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_version = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_version = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.host";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.host = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.host = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.card_iin";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.card_iin = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.card_iin = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.client_alias";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.client_alias = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.client_alias = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.acquirer_response_code";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.acquirer_response_code = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.acquirer_response_code = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.acquirer_response_delay";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.acquirer_response_delay = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.acquirer_response_delay = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.timestamp";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_timestamp = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_timestamp = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.transaction_id";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.transaction_id = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.transaction_id = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.amount";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.amount = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.amount = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.authorization_id";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.authorization_id = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.authorization_id = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.service_name";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.service_name = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.service_name = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.target_authorization_center";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.target_authorization_center = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.target_authorization_center = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.native_response_code";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.native_response_code = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.native_response_code = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.message";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_message = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_message = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.tags[*]";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_tags = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_tags = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.operation_name";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.operation_name = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.operation_name = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.merchant_alias";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.merchant_alias = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.merchant_alias = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.@timestamp";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_timestamp2 = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_timestamp2 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.connector";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_connector = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_connector = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.application";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_application = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_application = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.service";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_service = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_service = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.merchant_country";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.merchant_country = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.merchant_country = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.csc_indicator";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.csc_indicator = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.csc_indicator = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.time";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.source_time = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.source_time = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.acquirer_response_label";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.acquirer_response_label = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.acquirer_response_label = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.real_authorization_center";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.real_authorization_center = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.real_authorization_center = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.response_label";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.response_label = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.response_label = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.acquirer_message";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.acquirer_message = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.acquirer_message = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "_source.network_data";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
					value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
						row1.network_data = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
					row1.network_data = 

		null
;
				}				
    } catch (java.lang.Exception e_tFileInputJSON_1) {
        whetherReject_tFileInputJSON_1 = true;
                System.err.println(e_tFileInputJSON_1.getMessage());
                row1 = null;
    }
//}

 



/**
 * [tFileInputJSON_1 begin ] stop
 */
	
	/**
	 * [tFileInputJSON_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 


	tos_count_tFileInputJSON_1++;

/**
 * [tFileInputJSON_1 main ] stop
 */
	
	/**
	 * [tFileInputJSON_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

row2 = null;


// # Output table : 'row2'
row2_tmp.index = row1._index ;
row2_tmp.type = row1._type ;
row2_tmp.id = row1._id ;
row2_tmp.score = row1._score == null ? null : Integer.parseInt(row1._score) ;
row2_tmp.response_code = row1.response_code == null ? null : Integer.parseInt(row1.response_code);
row2_tmp.target_environment = row1.target_environment ;
row2_tmp.threed_status = row1.threed_status ;
row2_tmp.pid = row1.pid ;
row2_tmp.authorization_eci = row1.authorization_eci == null || row1.authorization_eci.matches("\\s*") ? null : Integer.parseInt(row1.authorization_eci) ;
row2_tmp.merchant_id = row1.merchant_id == null ? null : Long.parseLong(row1.merchant_id) ;
row2_tmp.client_id = row1.client_id == null? null : Long.parseLong(row1.client_id) ;
row2_tmp.currency_code = row1.currency_code ;
row2_tmp.payment_means_brand = row1.payment_means_brand ;
row2_tmp.path = row1.source_path ;
row2_tmp.trace_type = row1.trace_type ;
row2_tmp.date_num = row1.date_num == null ? null : Integer.parseInt(row1.date_num);
row2_tmp.original_amount = row1.original_amount == null ? null : Integer.parseInt(row1.original_amount );
row2_tmp.version = row1.source_version == null ? null : Integer.parseInt(row1.source_version) ;
row2_tmp.host = row1.host ;
row2_tmp.card_iin = row1.card_iin;
row2_tmp.client_alias = row1.client_alias == null || row1.client_alias.equals("%{client_id}") ? null : Long.parseLong(row1.client_alias) ;
row2_tmp.acquirer_response_code = row1.acquirer_response_code  == null ? null : Integer.parseInt(row1.acquirer_response_code);
row2_tmp.acquirer_response_delay = row1.acquirer_response_delay ==null ? null : Integer.parseInt(row1.acquirer_response_delay);
row2_tmp.timestamp = row1.source_timestamp ;
row2_tmp.transaction_id = row1.transaction_id ;
row2_tmp.service_name = row1.service_name;
row2_tmp.target_authorization_center = row1.target_authorization_center == null ? null : Integer.parseInt(row1.target_authorization_center);
row2_tmp.native_response_code = row1.native_response_code;
row2_tmp.operation_name = row1.operation_name ;
row2_tmp.merchant_alias = row1.merchant_alias == null || row1.merchant_alias.equals("%{merchant_id}") ? null : Long.parseLong(row1.merchant_alias) ;
row2_tmp.timestamp2 = row1.source_timestamp2 ;
row2_tmp.connector = row1.source_connector ;
row2_tmp.application = row1.source_application ;
row2_tmp.service = row1.source_service == null ? null : Integer.parseInt(row1.source_service) ;
row2_tmp.merchant_country = row1.merchant_country ;
row2_tmp.csc_indicator = row1.csc_indicator ;
row2_tmp.time = row1.source_time == null ? null : Integer.parseInt(row1.source_time) ;
row2_tmp.acquirer_response_label = row1.acquirer_response_label ;
row2_tmp.real_authorization_center = row1.real_authorization_center ;
row2_tmp.response_label = row1.response_label ;
row2_tmp.amount = row1.amount == null ? null : Integer.parseInt(row1.amount);
row2 = row2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_1 = false;
                    if(row2.index == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row2.index);
}

                    if(row2.type == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, row2.type);
}

                    if(row2.id == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, row2.id);
}

                    if(row2.score == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(4, row2.score);
}

                    if(row2.response_code == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(5, row2.response_code);
}

                    if(row2.target_environment == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, row2.target_environment);
}

                    if(row2.threed_status == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, row2.threed_status);
}

                    if(row2.pid == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, row2.pid);
}

                    if(row2.authorization_eci == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(9, row2.authorization_eci);
}

                    if(row2.merchant_id == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(10, row2.merchant_id);
}

                    if(row2.client_id == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(11, row2.client_id);
}

                    if(row2.currency_code == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, row2.currency_code);
}

                    if(row2.payment_means_brand == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, row2.payment_means_brand);
}

                    if(row2.path == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, row2.path);
}

                    if(row2.trace_type == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, row2.trace_type);
}

                    if(row2.date_num == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(16, row2.date_num);
}

                    if(row2.original_amount == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(17, row2.original_amount);
}

                    if(row2.version == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(18, row2.version);
}

                    if(row2.host == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, row2.host);
}

                    if(row2.card_iin == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, row2.card_iin);
}

                    if(row2.client_alias == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(21, row2.client_alias);
}

                    if(row2.acquirer_response_code == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(22, row2.acquirer_response_code);
}

                    if(row2.acquirer_response_delay == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(23, row2.acquirer_response_delay);
}

                    if(row2.timestamp == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(24, row2.timestamp);
}

                    if(row2.transaction_id == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, row2.transaction_id);
}

                    if(row2.service_name == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, row2.service_name);
}

                    if(row2.target_authorization_center == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(27, row2.target_authorization_center);
}

                    if(row2.native_response_code == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, row2.native_response_code);
}

                    if(row2.operation_name == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, row2.operation_name);
}

                    if(row2.merchant_alias == null) {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(30, row2.merchant_alias);
}

                    if(row2.timestamp2 == null) {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(31, row2.timestamp2);
}

                    if(row2.connector == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, row2.connector);
}

                    if(row2.application == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, row2.application);
}

                    if(row2.service == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(34, row2.service);
}

                    if(row2.merchant_country == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, row2.merchant_country);
}

                    if(row2.csc_indicator == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(36, row2.csc_indicator);
}

                    if(row2.time == null) {
pstmt_tDBOutput_1.setNull(37, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(37, row2.time);
}

                    if(row2.acquirer_response_label == null) {
pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(38, row2.acquirer_response_label);
}

                    if(row2.real_authorization_center == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, row2.real_authorization_center);
}

                    if(row2.response_label == null) {
pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(40, row2.response_label);
}

                    if(row2.amount == null) {
pstmt_tDBOutput_1.setNull(41, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(41, row2.amount);
}


        		pstmt_tDBOutput_1.addBatch();
        		nb_line_tDBOutput_1++;
    		 
    		  batchSizeCounter_tDBOutput_1++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
    		
    		            
            	    		insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1().limitBytePart1(insertedCount_tDBOutput_1,pstmt_tDBOutput_1);
            	    	
    			
			    batchSizeCounter_tDBOutput_1 = 0;
			}
    		

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
    		            
            	    		insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1().limitBytePart1(insertedCount_tDBOutput_1,pstmt_tDBOutput_1);
            	    	
            	batchSizeCounter_tDBOutput_1 = 0;
            	}
                	
                	conn_tDBOutput_1.commit();
            		
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputJSON_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputJSON_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

	}
	globalMap.put("tFileInputJSON_1_NB_LINE",nb_line_tFileInputJSON_1);
 

ok_Hash.put("tFileInputJSON_1", true);
end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());




/**
 * [tFileInputJSON_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
						int countSum_tDBOutput_1 = 0;
						if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
									break;
								}
								countSum_tDBOutput_1 += countEach_tDBOutput_1;
							}
							
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
            conn_tDBOutput_1.commit();
			
        conn_tDBOutput_1 .close();
        resourceMap.put("finish_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputJSON_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputJSON_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final import_stat_raw import_stat_rawClass = new import_stat_raw();

        int exitCode = import_stat_rawClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = import_stat_raw.class.getClassLoader().getResourceAsStream("seminar/import_stat_raw_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = import_stat_raw.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("datafolder", "id_String");
				
                context.datafolder=(String) context.getProperty("datafolder");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("datafolder")) {
                context.datafolder = (String) parentContextMap.get("datafolder");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileList_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileList_1) {
globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

e_tFileList_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : import_stat_raw");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     122753 characters generated by Talend Open Studio for Data Integration 
 *     on the 25 janvier 2019 20:19:23 CET
 ************************************************************************************************/