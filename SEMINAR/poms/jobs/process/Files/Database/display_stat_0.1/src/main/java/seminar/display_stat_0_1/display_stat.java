// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package seminar.display_stat_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: display_stat Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class display_stat implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "display_stat";
	private final String projectName = "SEMINAR";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					display_stat.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(display_stat.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputJSON_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SEMINAR_display_stat = new byte[0];
		static byte[] commonByteArray_SEMINAR_display_stat = new byte[0];

		public String _index;

		public String get_index() {
			return this._index;
		}

		public String _type;

		public String get_type() {
			return this._type;
		}

		public String _id;

		public String get_id() {
			return this._id;
		}

		public String _score;

		public String get_score() {
			return this._score;
		}

		public String response_code;

		public String getResponse_code() {
			return this.response_code;
		}

		public String target_environment;

		public String getTarget_environment() {
			return this.target_environment;
		}

		public String threed_status;

		public String getThreed_status() {
			return this.threed_status;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String authorization_eci;

		public String getAuthorization_eci() {
			return this.authorization_eci;
		}

		public String merchant_id;

		public String getMerchant_id() {
			return this.merchant_id;
		}

		public String source_type;

		public String getSource_type() {
			return this.source_type;
		}

		public String client_id;

		public String getClient_id() {
			return this.client_id;
		}

		public String currency_code;

		public String getCurrency_code() {
			return this.currency_code;
		}

		public String payment_means_brand;

		public String getPayment_means_brand() {
			return this.payment_means_brand;
		}

		public String source_path;

		public String getSource_path() {
			return this.source_path;
		}

		public String trace_type;

		public String getTrace_type() {
			return this.trace_type;
		}

		public String date_num;

		public String getDate_num() {
			return this.date_num;
		}

		public String original_amount;

		public String getOriginal_amount() {
			return this.original_amount;
		}

		public String source_version;

		public String getSource_version() {
			return this.source_version;
		}

		public String host;

		public String getHost() {
			return this.host;
		}

		public String card_iin;

		public String getCard_iin() {
			return this.card_iin;
		}

		public String client_alias;

		public String getClient_alias() {
			return this.client_alias;
		}

		public String acquirer_response_code;

		public String getAcquirer_response_code() {
			return this.acquirer_response_code;
		}

		public String acquirer_response_delay;

		public String getAcquirer_response_delay() {
			return this.acquirer_response_delay;
		}

		public String source_timestamp;

		public String getSource_timestamp() {
			return this.source_timestamp;
		}

		public String transaction_id;

		public String getTransaction_id() {
			return this.transaction_id;
		}

		public String amount;

		public String getAmount() {
			return this.amount;
		}

		public String authorization_id;

		public String getAuthorization_id() {
			return this.authorization_id;
		}

		public String service_name;

		public String getService_name() {
			return this.service_name;
		}

		public String target_authorization_center;

		public String getTarget_authorization_center() {
			return this.target_authorization_center;
		}

		public String native_response_code;

		public String getNative_response_code() {
			return this.native_response_code;
		}

		public String source_message;

		public String getSource_message() {
			return this.source_message;
		}

		public String source_tags;

		public String getSource_tags() {
			return this.source_tags;
		}

		public String operation_name;

		public String getOperation_name() {
			return this.operation_name;
		}

		public String merchant_alias;

		public String getMerchant_alias() {
			return this.merchant_alias;
		}

		public String source_timestamp2;

		public String getSource_timestamp2() {
			return this.source_timestamp2;
		}

		public String source_connector;

		public String getSource_connector() {
			return this.source_connector;
		}

		public String source_application;

		public String getSource_application() {
			return this.source_application;
		}

		public String source_service;

		public String getSource_service() {
			return this.source_service;
		}

		public String merchant_country;

		public String getMerchant_country() {
			return this.merchant_country;
		}

		public String csc_indicator;

		public String getCsc_indicator() {
			return this.csc_indicator;
		}

		public String source_time;

		public String getSource_time() {
			return this.source_time;
		}

		public String acquirer_response_label;

		public String getAcquirer_response_label() {
			return this.acquirer_response_label;
		}

		public String real_authorization_center;

		public String getReal_authorization_center() {
			return this.real_authorization_center;
		}

		public String response_label;

		public String getResponse_label() {
			return this.response_label;
		}

		public String acquirer_message;

		public String getAcquirer_message() {
			return this.acquirer_message;
		}

		public String network_data;

		public String getNetwork_data() {
			return this.network_data;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEMINAR_display_stat.length) {
					if (length < 1024
							&& commonByteArray_SEMINAR_display_stat.length == 0) {
						commonByteArray_SEMINAR_display_stat = new byte[1024];
					} else {
						commonByteArray_SEMINAR_display_stat = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SEMINAR_display_stat, 0, length);
				strReturn = new String(commonByteArray_SEMINAR_display_stat, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEMINAR_display_stat) {

				try {

					int length = 0;

					this._index = readString(dis);

					this._type = readString(dis);

					this._id = readString(dis);

					this._score = readString(dis);

					this.response_code = readString(dis);

					this.target_environment = readString(dis);

					this.threed_status = readString(dis);

					this.pid = readString(dis);

					this.authorization_eci = readString(dis);

					this.merchant_id = readString(dis);

					this.source_type = readString(dis);

					this.client_id = readString(dis);

					this.currency_code = readString(dis);

					this.payment_means_brand = readString(dis);

					this.source_path = readString(dis);

					this.trace_type = readString(dis);

					this.date_num = readString(dis);

					this.original_amount = readString(dis);

					this.source_version = readString(dis);

					this.host = readString(dis);

					this.card_iin = readString(dis);

					this.client_alias = readString(dis);

					this.acquirer_response_code = readString(dis);

					this.acquirer_response_delay = readString(dis);

					this.source_timestamp = readString(dis);

					this.transaction_id = readString(dis);

					this.amount = readString(dis);

					this.authorization_id = readString(dis);

					this.service_name = readString(dis);

					this.target_authorization_center = readString(dis);

					this.native_response_code = readString(dis);

					this.source_message = readString(dis);

					this.source_tags = readString(dis);

					this.operation_name = readString(dis);

					this.merchant_alias = readString(dis);

					this.source_timestamp2 = readString(dis);

					this.source_connector = readString(dis);

					this.source_application = readString(dis);

					this.source_service = readString(dis);

					this.merchant_country = readString(dis);

					this.csc_indicator = readString(dis);

					this.source_time = readString(dis);

					this.acquirer_response_label = readString(dis);

					this.real_authorization_center = readString(dis);

					this.response_label = readString(dis);

					this.acquirer_message = readString(dis);

					this.network_data = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._index, dos);

				// String

				writeString(this._type, dos);

				// String

				writeString(this._id, dos);

				// String

				writeString(this._score, dos);

				// String

				writeString(this.response_code, dos);

				// String

				writeString(this.target_environment, dos);

				// String

				writeString(this.threed_status, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.authorization_eci, dos);

				// String

				writeString(this.merchant_id, dos);

				// String

				writeString(this.source_type, dos);

				// String

				writeString(this.client_id, dos);

				// String

				writeString(this.currency_code, dos);

				// String

				writeString(this.payment_means_brand, dos);

				// String

				writeString(this.source_path, dos);

				// String

				writeString(this.trace_type, dos);

				// String

				writeString(this.date_num, dos);

				// String

				writeString(this.original_amount, dos);

				// String

				writeString(this.source_version, dos);

				// String

				writeString(this.host, dos);

				// String

				writeString(this.card_iin, dos);

				// String

				writeString(this.client_alias, dos);

				// String

				writeString(this.acquirer_response_code, dos);

				// String

				writeString(this.acquirer_response_delay, dos);

				// String

				writeString(this.source_timestamp, dos);

				// String

				writeString(this.transaction_id, dos);

				// String

				writeString(this.amount, dos);

				// String

				writeString(this.authorization_id, dos);

				// String

				writeString(this.service_name, dos);

				// String

				writeString(this.target_authorization_center, dos);

				// String

				writeString(this.native_response_code, dos);

				// String

				writeString(this.source_message, dos);

				// String

				writeString(this.source_tags, dos);

				// String

				writeString(this.operation_name, dos);

				// String

				writeString(this.merchant_alias, dos);

				// String

				writeString(this.source_timestamp2, dos);

				// String

				writeString(this.source_connector, dos);

				// String

				writeString(this.source_application, dos);

				// String

				writeString(this.source_service, dos);

				// String

				writeString(this.merchant_country, dos);

				// String

				writeString(this.csc_indicator, dos);

				// String

				writeString(this.source_time, dos);

				// String

				writeString(this.acquirer_response_label, dos);

				// String

				writeString(this.real_authorization_center, dos);

				// String

				writeString(this.response_label, dos);

				// String

				writeString(this.acquirer_message, dos);

				// String

				writeString(this.network_data, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_index=" + _index);
			sb.append(",_type=" + _type);
			sb.append(",_id=" + _id);
			sb.append(",_score=" + _score);
			sb.append(",response_code=" + response_code);
			sb.append(",target_environment=" + target_environment);
			sb.append(",threed_status=" + threed_status);
			sb.append(",pid=" + pid);
			sb.append(",authorization_eci=" + authorization_eci);
			sb.append(",merchant_id=" + merchant_id);
			sb.append(",source_type=" + source_type);
			sb.append(",client_id=" + client_id);
			sb.append(",currency_code=" + currency_code);
			sb.append(",payment_means_brand=" + payment_means_brand);
			sb.append(",source_path=" + source_path);
			sb.append(",trace_type=" + trace_type);
			sb.append(",date_num=" + date_num);
			sb.append(",original_amount=" + original_amount);
			sb.append(",source_version=" + source_version);
			sb.append(",host=" + host);
			sb.append(",card_iin=" + card_iin);
			sb.append(",client_alias=" + client_alias);
			sb.append(",acquirer_response_code=" + acquirer_response_code);
			sb.append(",acquirer_response_delay=" + acquirer_response_delay);
			sb.append(",source_timestamp=" + source_timestamp);
			sb.append(",transaction_id=" + transaction_id);
			sb.append(",amount=" + amount);
			sb.append(",authorization_id=" + authorization_id);
			sb.append(",service_name=" + service_name);
			sb.append(",target_authorization_center="
					+ target_authorization_center);
			sb.append(",native_response_code=" + native_response_code);
			sb.append(",source_message=" + source_message);
			sb.append(",source_tags=" + source_tags);
			sb.append(",operation_name=" + operation_name);
			sb.append(",merchant_alias=" + merchant_alias);
			sb.append(",source_timestamp2=" + source_timestamp2);
			sb.append(",source_connector=" + source_connector);
			sb.append(",source_application=" + source_application);
			sb.append(",source_service=" + source_service);
			sb.append(",merchant_country=" + merchant_country);
			sb.append(",csc_indicator=" + csc_indicator);
			sb.append(",source_time=" + source_time);
			sb.append(",acquirer_response_label=" + acquirer_response_label);
			sb.append(",real_authorization_center=" + real_authorization_center);
			sb.append(",response_label=" + response_label);
			sb.append(",acquirer_message=" + acquirer_message);
			sb.append(",network_data=" + network_data);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[47];

					public void addRow(String[] row) {

						for (int i = 0; i < 47; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 46 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 46 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|%27$-");
							sbformat.append(colLengths[26]);
							sbformat.append("s");

							sbformat.append("|%28$-");
							sbformat.append(colLengths[27]);
							sbformat.append("s");

							sbformat.append("|%29$-");
							sbformat.append(colLengths[28]);
							sbformat.append("s");

							sbformat.append("|%30$-");
							sbformat.append(colLengths[29]);
							sbformat.append("s");

							sbformat.append("|%31$-");
							sbformat.append(colLengths[30]);
							sbformat.append("s");

							sbformat.append("|%32$-");
							sbformat.append(colLengths[31]);
							sbformat.append("s");

							sbformat.append("|%33$-");
							sbformat.append(colLengths[32]);
							sbformat.append("s");

							sbformat.append("|%34$-");
							sbformat.append(colLengths[33]);
							sbformat.append("s");

							sbformat.append("|%35$-");
							sbformat.append(colLengths[34]);
							sbformat.append("s");

							sbformat.append("|%36$-");
							sbformat.append(colLengths[35]);
							sbformat.append("s");

							sbformat.append("|%37$-");
							sbformat.append(colLengths[36]);
							sbformat.append("s");

							sbformat.append("|%38$-");
							sbformat.append(colLengths[37]);
							sbformat.append("s");

							sbformat.append("|%39$-");
							sbformat.append(colLengths[38]);
							sbformat.append("s");

							sbformat.append("|%40$-");
							sbformat.append(colLengths[39]);
							sbformat.append("s");

							sbformat.append("|%41$-");
							sbformat.append(colLengths[40]);
							sbformat.append("s");

							sbformat.append("|%42$-");
							sbformat.append(colLengths[41]);
							sbformat.append("s");

							sbformat.append("|%43$-");
							sbformat.append(colLengths[42]);
							sbformat.append("s");

							sbformat.append("|%44$-");
							sbformat.append(colLengths[43]);
							sbformat.append("s");

							sbformat.append("|%45$-");
							sbformat.append(colLengths[44]);
							sbformat.append("s");

							sbformat.append("|%46$-");
							sbformat.append(colLengths[45]);
							sbformat.append("s");

							sbformat.append("|%47$-");
							sbformat.append(colLengths[46]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[25]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[26]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[27]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[28]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[29]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[30]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[31]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[32]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[33]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[34]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[35]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[36]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[37]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[38]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[39]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[40]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[41]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[42]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[43]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[44]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[45]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[46]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "_index", "_type", "_id",
						"_score", "response_code", "target_environment",
						"threed_status", "pid", "authorization_eci",
						"merchant_id", "source_type", "client_id",
						"currency_code", "payment_means_brand", "source_path",
						"trace_type", "date_num", "original_amount",
						"source_version", "host", "card_iin", "client_alias",
						"acquirer_response_code", "acquirer_response_delay",
						"source_timestamp", "transaction_id", "amount",
						"authorization_id", "service_name",
						"target_authorization_center", "native_response_code",
						"source_message", "source_tags", "operation_name",
						"merchant_alias", "source_timestamp2",
						"source_connector", "source_application",
						"source_service", "merchant_country", "csc_indicator",
						"source_time", "acquirer_response_label",
						"real_authorization_center", "response_label",
						"acquirer_message", "network_data", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFileInputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_1", false);
				start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_1";

				int tos_count_tFileInputJSON_1 = 0;

				class JsonPathCache_tFileInputJSON_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(
							String jsonPath) {
						if (jsonPathString2compiledJsonPath
								.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath
									.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath,
									compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_1 = 0;

				JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

				String loopPath_tFileInputJSON_1 = "$[*]";
				java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_1 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration
								.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_1 = null;
				try {
					filenameOrStream_tFileInputJSON_1 = "C:/SEMINAR_PROJECT/files/elasticdump-28.11.2018-11.12.2018/file_stat_autor_2018.11.28.json";
				} catch (java.lang.Exception e_tFileInputJSON_1) {

					System.err.println(e_tFileInputJSON_1.getMessage());
				}

				try {
					if (filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream) {
						is_tFileInputJSON_1 = (java.io.InputStream) filenameOrStream_tFileInputJSON_1;
					} else {

						is_tFileInputJSON_1 = new java.io.FileInputStream(
								(String) filenameOrStream_tFileInputJSON_1);

					}

					com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = parseContext_tFileInputJSON_1
							.parse(is_tFileInputJSON_1, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
							.getCompiledJsonPath(loopPath_tFileInputJSON_1);
					Object result_tFileInputJSON_1 = document_tFileInputJSON_1
							.read(compiledLoopPath_tFileInputJSON_1,
									net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
					} else {
						resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
					}
				} catch (java.lang.Exception e_tFileInputJSON_1) {
					System.err.println(e_tFileInputJSON_1.getMessage());
				} finally {
					if (is_tFileInputJSON_1 != null) {
						is_tFileInputJSON_1.close();
					}
				}

				String jsonPath_tFileInputJSON_1 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

				Object value_tFileInputJSON_1 = null;
				for (Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
					nb_line_tFileInputJSON_1++;
					row1 = null;
					boolean whetherReject_tFileInputJSON_1 = false;
					row1 = new row1Struct();

					try {
						jsonPath_tFileInputJSON_1 = "_index";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1._index = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1._index =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_type";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1._type = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1._type =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_id";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1._id = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1._id =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_score";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1._score = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1._score =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.response_code";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.response_code = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.response_code =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.target_environment";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.target_environment = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.target_environment =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.threed_status";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.threed_status = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.threed_status =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.pid";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.pid = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.pid =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.authorization_eci";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.authorization_eci = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.authorization_eci =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.merchant_id";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.merchant_id = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.merchant_id =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.type";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_type = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_type =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.client_id";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.client_id = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.client_id =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.currency_code";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.currency_code = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.currency_code =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.payment_means_brand";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.payment_means_brand = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.payment_means_brand =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.path";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_path = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_path =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.trace_type";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.trace_type = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.trace_type =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.date_num";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.date_num = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.date_num =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.original_amount";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.original_amount = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.original_amount =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.@version";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_version = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_version =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.host";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.host = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.host =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.card_iin";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.card_iin = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.card_iin =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.client_alias";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.client_alias = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.client_alias =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.acquirer_response_code";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.acquirer_response_code = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.acquirer_response_code =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.acquirer_response_delay";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.acquirer_response_delay = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.acquirer_response_delay =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.timestamp";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_timestamp = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_timestamp =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.transaction_id";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.transaction_id = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.transaction_id =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.amount";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.amount = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.amount =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.authorization_id";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.authorization_id = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.authorization_id =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.service_name";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.service_name = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.service_name =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.target_authorization_center";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.target_authorization_center = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.target_authorization_center =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.native_response_code";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.native_response_code = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.native_response_code =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.message";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_message = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_message =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.tags[*]";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_tags = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_tags =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.operation_name";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.operation_name = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.operation_name =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.merchant_alias";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.merchant_alias = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.merchant_alias =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.@timestamp";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_timestamp2 = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_timestamp2 =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.connector";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_connector = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_connector =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.application";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_application = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_application =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.service";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_service = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_service =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.merchant_country";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.merchant_country = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.merchant_country =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.csc_indicator";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.csc_indicator = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.csc_indicator =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.time";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.source_time = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.source_time =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.acquirer_response_label";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.acquirer_response_label = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.acquirer_response_label =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.real_authorization_center";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.real_authorization_center = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.real_authorization_center =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.response_label";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.response_label = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.response_label =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.acquirer_message";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.acquirer_message = value_tFileInputJSON_1 == null ?

							null
									: value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.acquirer_message =

							null;
						}
						jsonPath_tFileInputJSON_1 = "_source.network_data";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {
							value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1
									.read(row_tFileInputJSON_1);
							row1.network_data = value_tFileInputJSON_1 == null ?

							null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.network_data =

							null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_1) {
						whetherReject_tFileInputJSON_1 = true;
						System.err.println(e_tFileInputJSON_1.getMessage());
						row1 = null;
					}
					// }

					/**
					 * [tFileInputJSON_1 begin ] stop
					 */

					/**
					 * [tFileInputJSON_1 main ] start
					 */

					currentComponent = "tFileInputJSON_1";

					tos_count_tFileInputJSON_1++;

					/**
					 * [tFileInputJSON_1 main ] stop
					 */

					/**
					 * [tFileInputJSON_1 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_begin ] stop
					 */
					// Start of branch "row1"
					if (row1 != null) {

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						// /////////////////////

						String[] row_tLogRow_1 = new String[47];

						if (row1._index != null) { //
							row_tLogRow_1[0] = String.valueOf(row1._index);

						} //

						if (row1._type != null) { //
							row_tLogRow_1[1] = String.valueOf(row1._type);

						} //

						if (row1._id != null) { //
							row_tLogRow_1[2] = String.valueOf(row1._id);

						} //

						if (row1._score != null) { //
							row_tLogRow_1[3] = String.valueOf(row1._score);

						} //

						if (row1.response_code != null) { //
							row_tLogRow_1[4] = String
									.valueOf(row1.response_code);

						} //

						if (row1.target_environment != null) { //
							row_tLogRow_1[5] = String
									.valueOf(row1.target_environment);

						} //

						if (row1.threed_status != null) { //
							row_tLogRow_1[6] = String
									.valueOf(row1.threed_status);

						} //

						if (row1.pid != null) { //
							row_tLogRow_1[7] = String.valueOf(row1.pid);

						} //

						if (row1.authorization_eci != null) { //
							row_tLogRow_1[8] = String
									.valueOf(row1.authorization_eci);

						} //

						if (row1.merchant_id != null) { //
							row_tLogRow_1[9] = String.valueOf(row1.merchant_id);

						} //

						if (row1.source_type != null) { //
							row_tLogRow_1[10] = String
									.valueOf(row1.source_type);

						} //

						if (row1.client_id != null) { //
							row_tLogRow_1[11] = String.valueOf(row1.client_id);

						} //

						if (row1.currency_code != null) { //
							row_tLogRow_1[12] = String
									.valueOf(row1.currency_code);

						} //

						if (row1.payment_means_brand != null) { //
							row_tLogRow_1[13] = String
									.valueOf(row1.payment_means_brand);

						} //

						if (row1.source_path != null) { //
							row_tLogRow_1[14] = String
									.valueOf(row1.source_path);

						} //

						if (row1.trace_type != null) { //
							row_tLogRow_1[15] = String.valueOf(row1.trace_type);

						} //

						if (row1.date_num != null) { //
							row_tLogRow_1[16] = String.valueOf(row1.date_num);

						} //

						if (row1.original_amount != null) { //
							row_tLogRow_1[17] = String
									.valueOf(row1.original_amount);

						} //

						if (row1.source_version != null) { //
							row_tLogRow_1[18] = String
									.valueOf(row1.source_version);

						} //

						if (row1.host != null) { //
							row_tLogRow_1[19] = String.valueOf(row1.host);

						} //

						if (row1.card_iin != null) { //
							row_tLogRow_1[20] = String.valueOf(row1.card_iin);

						} //

						if (row1.client_alias != null) { //
							row_tLogRow_1[21] = String
									.valueOf(row1.client_alias);

						} //

						if (row1.acquirer_response_code != null) { //
							row_tLogRow_1[22] = String
									.valueOf(row1.acquirer_response_code);

						} //

						if (row1.acquirer_response_delay != null) { //
							row_tLogRow_1[23] = String
									.valueOf(row1.acquirer_response_delay);

						} //

						if (row1.source_timestamp != null) { //
							row_tLogRow_1[24] = String
									.valueOf(row1.source_timestamp);

						} //

						if (row1.transaction_id != null) { //
							row_tLogRow_1[25] = String
									.valueOf(row1.transaction_id);

						} //

						if (row1.amount != null) { //
							row_tLogRow_1[26] = String.valueOf(row1.amount);

						} //

						if (row1.authorization_id != null) { //
							row_tLogRow_1[27] = String
									.valueOf(row1.authorization_id);

						} //

						if (row1.service_name != null) { //
							row_tLogRow_1[28] = String
									.valueOf(row1.service_name);

						} //

						if (row1.target_authorization_center != null) { //
							row_tLogRow_1[29] = String
									.valueOf(row1.target_authorization_center);

						} //

						if (row1.native_response_code != null) { //
							row_tLogRow_1[30] = String
									.valueOf(row1.native_response_code);

						} //

						if (row1.source_message != null) { //
							row_tLogRow_1[31] = String
									.valueOf(row1.source_message);

						} //

						if (row1.source_tags != null) { //
							row_tLogRow_1[32] = String
									.valueOf(row1.source_tags);

						} //

						if (row1.operation_name != null) { //
							row_tLogRow_1[33] = String
									.valueOf(row1.operation_name);

						} //

						if (row1.merchant_alias != null) { //
							row_tLogRow_1[34] = String
									.valueOf(row1.merchant_alias);

						} //

						if (row1.source_timestamp2 != null) { //
							row_tLogRow_1[35] = String
									.valueOf(row1.source_timestamp2);

						} //

						if (row1.source_connector != null) { //
							row_tLogRow_1[36] = String
									.valueOf(row1.source_connector);

						} //

						if (row1.source_application != null) { //
							row_tLogRow_1[37] = String
									.valueOf(row1.source_application);

						} //

						if (row1.source_service != null) { //
							row_tLogRow_1[38] = String
									.valueOf(row1.source_service);

						} //

						if (row1.merchant_country != null) { //
							row_tLogRow_1[39] = String
									.valueOf(row1.merchant_country);

						} //

						if (row1.csc_indicator != null) { //
							row_tLogRow_1[40] = String
									.valueOf(row1.csc_indicator);

						} //

						if (row1.source_time != null) { //
							row_tLogRow_1[41] = String
									.valueOf(row1.source_time);

						} //

						if (row1.acquirer_response_label != null) { //
							row_tLogRow_1[42] = String
									.valueOf(row1.acquirer_response_label);

						} //

						if (row1.real_authorization_center != null) { //
							row_tLogRow_1[43] = String
									.valueOf(row1.real_authorization_center);

						} //

						if (row1.response_label != null) { //
							row_tLogRow_1[44] = String
									.valueOf(row1.response_label);

						} //

						if (row1.acquirer_message != null) { //
							row_tLogRow_1[45] = String
									.valueOf(row1.acquirer_message);

						} //

						if (row1.network_data != null) { //
							row_tLogRow_1[46] = String
									.valueOf(row1.network_data);

						} //

						util_tLogRow_1.addRow(row_tLogRow_1);
						nb_line_tLogRow_1++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tLogRow_1 process_data_begin ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_1 process_data_end ] start
						 */

						currentComponent = "tLogRow_1";

						/**
						 * [tLogRow_1 process_data_end ] stop
						 */

					} // End of branch "row1"

					/**
					 * [tFileInputJSON_1 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_1 end ] start
					 */

					currentComponent = "tFileInputJSON_1";

				}
				globalMap.put("tFileInputJSON_1_NB_LINE",
						nb_line_tFileInputJSON_1);

				ok_Hash.put("tFileInputJSON_1", true);
				end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_1 finally ] start
				 */

				currentComponent = "tFileInputJSON_1";

				/**
				 * [tFileInputJSON_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final display_stat display_statClass = new display_stat();

		int exitCode = display_statClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = display_stat.class.getClassLoader()
					.getResourceAsStream(
							"seminar/display_stat_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = display_stat.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputJSON_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputJSON_1) {
			globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", -1);

			e_tFileInputJSON_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : display_stat");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 105085 characters generated by Talend Open Studio for Data Integration on the
 * 19 décembre 2018 00:54:07 CET
 ************************************************************************************************/
