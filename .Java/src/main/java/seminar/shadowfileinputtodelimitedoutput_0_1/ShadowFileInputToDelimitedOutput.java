// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package seminar.shadowfileinputtodelimitedoutput_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: ShadowFileInputToDelimitedOutput Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class ShadowFileInputToDelimitedOutput implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ShadowFileInputToDelimitedOutput";
	private final String projectName = "SEMINAR";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ShadowFileInputToDelimitedOutput.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ShadowFileInputToDelimitedOutput.this,
									new Object[] { e, currentComponent,
											globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputJSON_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class RowStruct implements
			routines.system.IPersistableRow<RowStruct> {
		final static byte[] commonByteArrayLock_SEMINAR_ShadowFileInputToDelimitedOutput = new byte[0];
		static byte[] commonByteArray_SEMINAR_ShadowFileInputToDelimitedOutput = new byte[0];

		public String row0;

		public String getRow0() {
			return this.row0;
		}

		public String row1;

		public String getRow1() {
			return this.row1;
		}

		public String row2;

		public String getRow2() {
			return this.row2;
		}

		public String row3;

		public String getRow3() {
			return this.row3;
		}

		public String row4;

		public String getRow4() {
			return this.row4;
		}

		public String row5;

		public String getRow5() {
			return this.row5;
		}

		public String row6;

		public String getRow6() {
			return this.row6;
		}

		public String row7;

		public String getRow7() {
			return this.row7;
		}

		public String row8;

		public String getRow8() {
			return this.row8;
		}

		public String row9;

		public String getRow9() {
			return this.row9;
		}

		public String row10;

		public String getRow10() {
			return this.row10;
		}

		public String row11;

		public String getRow11() {
			return this.row11;
		}

		public String row12;

		public String getRow12() {
			return this.row12;
		}

		public String row13;

		public String getRow13() {
			return this.row13;
		}

		public String row14;

		public String getRow14() {
			return this.row14;
		}

		public String row15;

		public String getRow15() {
			return this.row15;
		}

		public String row16;

		public String getRow16() {
			return this.row16;
		}

		public String row17;

		public String getRow17() {
			return this.row17;
		}

		public String row18;

		public String getRow18() {
			return this.row18;
		}

		public String row19;

		public String getRow19() {
			return this.row19;
		}

		public String row20;

		public String getRow20() {
			return this.row20;
		}

		public String row21;

		public String getRow21() {
			return this.row21;
		}

		public String row22;

		public String getRow22() {
			return this.row22;
		}

		public String row23;

		public String getRow23() {
			return this.row23;
		}

		public String row24;

		public String getRow24() {
			return this.row24;
		}

		public String row25;

		public String getRow25() {
			return this.row25;
		}

		public String row26;

		public String getRow26() {
			return this.row26;
		}

		public String row27;

		public String getRow27() {
			return this.row27;
		}

		public String row28;

		public String getRow28() {
			return this.row28;
		}

		public String row29;

		public String getRow29() {
			return this.row29;
		}

		public String row30;

		public String getRow30() {
			return this.row30;
		}

		public String row31;

		public String getRow31() {
			return this.row31;
		}

		public String row32;

		public String getRow32() {
			return this.row32;
		}

		public String row33;

		public String getRow33() {
			return this.row33;
		}

		public String row34;

		public String getRow34() {
			return this.row34;
		}

		public String row35;

		public String getRow35() {
			return this.row35;
		}

		public String row36;

		public String getRow36() {
			return this.row36;
		}

		public String row37;

		public String getRow37() {
			return this.row37;
		}

		public String row38;

		public String getRow38() {
			return this.row38;
		}

		public String row39;

		public String getRow39() {
			return this.row39;
		}

		public String row40;

		public String getRow40() {
			return this.row40;
		}

		public String row41;

		public String getRow41() {
			return this.row41;
		}

		public String row42;

		public String getRow42() {
			return this.row42;
		}

		public String row43;

		public String getRow43() {
			return this.row43;
		}

		public String row44;

		public String getRow44() {
			return this.row44;
		}

		public String row45;

		public String getRow45() {
			return this.row45;
		}

		public String row46;

		public String getRow46() {
			return this.row46;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SEMINAR_ShadowFileInputToDelimitedOutput.length) {
					if (length < 1024
							&& commonByteArray_SEMINAR_ShadowFileInputToDelimitedOutput.length == 0) {
						commonByteArray_SEMINAR_ShadowFileInputToDelimitedOutput = new byte[1024];
					} else {
						commonByteArray_SEMINAR_ShadowFileInputToDelimitedOutput = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_SEMINAR_ShadowFileInputToDelimitedOutput,
						0, length);
				strReturn = new String(
						commonByteArray_SEMINAR_ShadowFileInputToDelimitedOutput,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SEMINAR_ShadowFileInputToDelimitedOutput) {

				try {

					int length = 0;

					this.row0 = readString(dis);

					this.row1 = readString(dis);

					this.row2 = readString(dis);

					this.row3 = readString(dis);

					this.row4 = readString(dis);

					this.row5 = readString(dis);

					this.row6 = readString(dis);

					this.row7 = readString(dis);

					this.row8 = readString(dis);

					this.row9 = readString(dis);

					this.row10 = readString(dis);

					this.row11 = readString(dis);

					this.row12 = readString(dis);

					this.row13 = readString(dis);

					this.row14 = readString(dis);

					this.row15 = readString(dis);

					this.row16 = readString(dis);

					this.row17 = readString(dis);

					this.row18 = readString(dis);

					this.row19 = readString(dis);

					this.row20 = readString(dis);

					this.row21 = readString(dis);

					this.row22 = readString(dis);

					this.row23 = readString(dis);

					this.row24 = readString(dis);

					this.row25 = readString(dis);

					this.row26 = readString(dis);

					this.row27 = readString(dis);

					this.row28 = readString(dis);

					this.row29 = readString(dis);

					this.row30 = readString(dis);

					this.row31 = readString(dis);

					this.row32 = readString(dis);

					this.row33 = readString(dis);

					this.row34 = readString(dis);

					this.row35 = readString(dis);

					this.row36 = readString(dis);

					this.row37 = readString(dis);

					this.row38 = readString(dis);

					this.row39 = readString(dis);

					this.row40 = readString(dis);

					this.row41 = readString(dis);

					this.row42 = readString(dis);

					this.row43 = readString(dis);

					this.row44 = readString(dis);

					this.row45 = readString(dis);

					this.row46 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.row0, dos);

				// String

				writeString(this.row1, dos);

				// String

				writeString(this.row2, dos);

				// String

				writeString(this.row3, dos);

				// String

				writeString(this.row4, dos);

				// String

				writeString(this.row5, dos);

				// String

				writeString(this.row6, dos);

				// String

				writeString(this.row7, dos);

				// String

				writeString(this.row8, dos);

				// String

				writeString(this.row9, dos);

				// String

				writeString(this.row10, dos);

				// String

				writeString(this.row11, dos);

				// String

				writeString(this.row12, dos);

				// String

				writeString(this.row13, dos);

				// String

				writeString(this.row14, dos);

				// String

				writeString(this.row15, dos);

				// String

				writeString(this.row16, dos);

				// String

				writeString(this.row17, dos);

				// String

				writeString(this.row18, dos);

				// String

				writeString(this.row19, dos);

				// String

				writeString(this.row20, dos);

				// String

				writeString(this.row21, dos);

				// String

				writeString(this.row22, dos);

				// String

				writeString(this.row23, dos);

				// String

				writeString(this.row24, dos);

				// String

				writeString(this.row25, dos);

				// String

				writeString(this.row26, dos);

				// String

				writeString(this.row27, dos);

				// String

				writeString(this.row28, dos);

				// String

				writeString(this.row29, dos);

				// String

				writeString(this.row30, dos);

				// String

				writeString(this.row31, dos);

				// String

				writeString(this.row32, dos);

				// String

				writeString(this.row33, dos);

				// String

				writeString(this.row34, dos);

				// String

				writeString(this.row35, dos);

				// String

				writeString(this.row36, dos);

				// String

				writeString(this.row37, dos);

				// String

				writeString(this.row38, dos);

				// String

				writeString(this.row39, dos);

				// String

				writeString(this.row40, dos);

				// String

				writeString(this.row41, dos);

				// String

				writeString(this.row42, dos);

				// String

				writeString(this.row43, dos);

				// String

				writeString(this.row44, dos);

				// String

				writeString(this.row45, dos);

				// String

				writeString(this.row46, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("row0=" + row0);
			sb.append(",row1=" + row1);
			sb.append(",row2=" + row2);
			sb.append(",row3=" + row3);
			sb.append(",row4=" + row4);
			sb.append(",row5=" + row5);
			sb.append(",row6=" + row6);
			sb.append(",row7=" + row7);
			sb.append(",row8=" + row8);
			sb.append(",row9=" + row9);
			sb.append(",row10=" + row10);
			sb.append(",row11=" + row11);
			sb.append(",row12=" + row12);
			sb.append(",row13=" + row13);
			sb.append(",row14=" + row14);
			sb.append(",row15=" + row15);
			sb.append(",row16=" + row16);
			sb.append(",row17=" + row17);
			sb.append(",row18=" + row18);
			sb.append(",row19=" + row19);
			sb.append(",row20=" + row20);
			sb.append(",row21=" + row21);
			sb.append(",row22=" + row22);
			sb.append(",row23=" + row23);
			sb.append(",row24=" + row24);
			sb.append(",row25=" + row25);
			sb.append(",row26=" + row26);
			sb.append(",row27=" + row27);
			sb.append(",row28=" + row28);
			sb.append(",row29=" + row29);
			sb.append(",row30=" + row30);
			sb.append(",row31=" + row31);
			sb.append(",row32=" + row32);
			sb.append(",row33=" + row33);
			sb.append(",row34=" + row34);
			sb.append(",row35=" + row35);
			sb.append(",row36=" + row36);
			sb.append(",row37=" + row37);
			sb.append(",row38=" + row38);
			sb.append(",row39=" + row39);
			sb.append(",row40=" + row40);
			sb.append(",row41=" + row41);
			sb.append(",row42=" + row42);
			sb.append(",row43=" + row43);
			sb.append(",row44=" + row44);
			sb.append(",row45=" + row45);
			sb.append(",row46=" + row46);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSONProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputJSON_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				RowStruct Row = new RowStruct();

				/**
				 * [tFileOutputDelimited begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited", false);
				start_Hash.put("tFileOutputDelimited",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited";

				int tos_count_tFileOutputDelimited = 0;

				String fileName_tFileOutputDelimited = "";
				fileName_tFileOutputDelimited = (new java.io.File(
						"C:/SEMINAR_PROJECT/TALEND_PROJECT/SEMINAR/temp/preview/file_stat_autor_2018.11.28.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited = null;
				String extension_tFileOutputDelimited = null;
				String directory_tFileOutputDelimited = null;
				if ((fileName_tFileOutputDelimited.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited.lastIndexOf(".") < fileName_tFileOutputDelimited
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited;
						extension_tFileOutputDelimited = "";
					} else {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(0, fileName_tFileOutputDelimited
										.lastIndexOf("."));
						extension_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(fileName_tFileOutputDelimited
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited = fileName_tFileOutputDelimited
							.substring(0, fileName_tFileOutputDelimited
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(0, fileName_tFileOutputDelimited
										.lastIndexOf("."));
						extension_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(fileName_tFileOutputDelimited
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited;
						extension_tFileOutputDelimited = "";
					}
					directory_tFileOutputDelimited = "";
				}
				boolean isFileGenerated_tFileOutputDelimited = true;
				java.io.File filetFileOutputDelimited = new java.io.File(
						fileName_tFileOutputDelimited);
				globalMap.put("tFileOutputDelimited_FILE_NAME",
						fileName_tFileOutputDelimited);
				String[] headColutFileOutputDelimited = new String[47];
				class CSVBasicSet_tFileOutputDelimited {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited = 0;
				int splitedFileNo_tFileOutputDelimited = 0;
				int currentRow_tFileOutputDelimited = 0;

				CSVBasicSet_tFileOutputDelimited csvSettings_tFileOutputDelimited = new CSVBasicSet_tFileOutputDelimited();
				csvSettings_tFileOutputDelimited.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited.setEscapeAndTextEnclosure(
						"\\", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited != null
						&& directory_tFileOutputDelimited.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited = new java.io.File(
							directory_tFileOutputDelimited);
					if (!dir_tFileOutputDelimited.exists()) {
						dir_tFileOutputDelimited.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited = null;

				java.io.File fileToDelete_tFileOutputDelimited = new java.io.File(
						fileName_tFileOutputDelimited);
				if (fileToDelete_tFileOutputDelimited.exists()) {
					fileToDelete_tFileOutputDelimited.delete();
				}
				CsvWritertFileOutputDelimited = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited,
												false), "UTF-8")));
				CsvWritertFileOutputDelimited
						.setSeparator(csvSettings_tFileOutputDelimited
								.getFieldDelim());
				if (csvSettings_tFileOutputDelimited.isUseCRLFRecordDelimiter()) {
					CsvWritertFileOutputDelimited.setLineEnd("\r\n");
				} else {
					CsvWritertFileOutputDelimited.setLineEnd(""
							+ csvSettings_tFileOutputDelimited.getRowDelim());
				}
				CsvWritertFileOutputDelimited
						.setEscapeChar(csvSettings_tFileOutputDelimited
								.getEscapeChar());
				CsvWritertFileOutputDelimited
						.setQuoteChar(csvSettings_tFileOutputDelimited
								.getTextEnclosure());
				CsvWritertFileOutputDelimited
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited",
						CsvWritertFileOutputDelimited);
				resourceMap.put("nb_line_tFileOutputDelimited",
						nb_line_tFileOutputDelimited);

				/**
				 * [tFileOutputDelimited begin ] stop
				 */

				/**
				 * [tFileInputJSON begin ] start
				 */

				ok_Hash.put("tFileInputJSON", false);
				start_Hash.put("tFileInputJSON", System.currentTimeMillis());

				currentComponent = "tFileInputJSON";

				int tos_count_tFileInputJSON = 0;

				class JsonPathCache_tFileInputJSON {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(
							String jsonPath) {
						if (jsonPathString2compiledJsonPath
								.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath
									.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath,
									compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON = 0;

				JsonPathCache_tFileInputJSON jsonPathCache_tFileInputJSON = new JsonPathCache_tFileInputJSON();

				String loopPath_tFileInputJSON = "$[*]";
				java.util.List<Object> resultset_tFileInputJSON = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration
								.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON = null;
				try {
					filenameOrStream_tFileInputJSON = "C:/SEMINAR_PROJECT/files/elasticdump-28.11.2018-11.12.2018/file_stat_autor_2018.11.28.json";
				} catch (java.lang.Exception e_tFileInputJSON) {

					System.err.println(e_tFileInputJSON.getMessage());
				}

				try {
					if (filenameOrStream_tFileInputJSON instanceof java.io.InputStream) {
						is_tFileInputJSON = (java.io.InputStream) filenameOrStream_tFileInputJSON;
					} else {

						is_tFileInputJSON = new java.io.FileInputStream(
								(String) filenameOrStream_tFileInputJSON);

					}

					com.jayway.jsonpath.ReadContext document_tFileInputJSON = parseContext_tFileInputJSON
							.parse(is_tFileInputJSON, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON = jsonPathCache_tFileInputJSON
							.getCompiledJsonPath(loopPath_tFileInputJSON);
					Object result_tFileInputJSON = document_tFileInputJSON
							.read(compiledLoopPath_tFileInputJSON,
									net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON = (net.minidev.json.JSONArray) result_tFileInputJSON;
					} else {
						resultset_tFileInputJSON.add(result_tFileInputJSON);
					}
				} catch (java.lang.Exception e_tFileInputJSON) {
					System.err.println(e_tFileInputJSON.getMessage());
				} finally {
					if (is_tFileInputJSON != null) {
						is_tFileInputJSON.close();
					}
				}

				String jsonPath_tFileInputJSON = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON = null;

				Object value_tFileInputJSON = null;
				for (Object row_tFileInputJSON : resultset_tFileInputJSON) {
					nb_line_tFileInputJSON++;
					Row = null;
					boolean whetherReject_tFileInputJSON = false;
					Row = new RowStruct();

					try {
						jsonPath_tFileInputJSON = "_index";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row0 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row0 =

							null;
						}
						jsonPath_tFileInputJSON = "_type";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row1 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row1 =

							null;
						}
						jsonPath_tFileInputJSON = "_id";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row2 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row2 =

							null;
						}
						jsonPath_tFileInputJSON = "_score";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row3 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row3 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.response_code";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row4 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row4 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.target_environment";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row5 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row5 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.threed_status";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row6 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row6 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.pid";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row7 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row7 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.authorization_eci";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row8 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row8 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.merchant_id";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row9 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row9 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.type";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row10 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row10 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.client_id";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row11 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row11 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.currency_code";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row12 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row12 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.payment_means_brand";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row13 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row13 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.path";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row14 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row14 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.trace_type";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row15 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row15 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.date_num";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row16 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row16 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.original_amount";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row17 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row17 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.@version";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row18 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row18 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.host";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row19 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row19 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.card_iin";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row20 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row20 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.client_alias";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row21 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row21 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.acquirer_response_code";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row22 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row22 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.acquirer_response_delay";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row23 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row23 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.timestamp";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row24 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row24 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.transaction_id";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row25 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row25 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.amount";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row26 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row26 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.authorization_id";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row27 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row27 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.service_name";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row28 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row28 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.target_authorization_center";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row29 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row29 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.native_response_code";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row30 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row30 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.message";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row31 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row31 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.tags[*]";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row32 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row32 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.operation_name";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row33 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row33 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.merchant_alias";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row34 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row34 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.@timestamp";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row35 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row35 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.connector";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row36 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row36 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.application";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row37 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row37 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.service";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row38 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row38 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.merchant_country";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row39 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row39 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.csc_indicator";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row40 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row40 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.time";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row41 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row41 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.acquirer_response_label";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row42 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row42 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.real_authorization_center";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row43 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row43 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.response_label";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row44 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row44 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.acquirer_message";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row45 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row45 =

							null;
						}
						jsonPath_tFileInputJSON = "_source.network_data";
						compiledJsonPath_tFileInputJSON = jsonPathCache_tFileInputJSON
								.getCompiledJsonPath(jsonPath_tFileInputJSON);

						try {
							value_tFileInputJSON = compiledJsonPath_tFileInputJSON
									.read(row_tFileInputJSON);
							Row.row46 = value_tFileInputJSON == null ?

							null : value_tFileInputJSON.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON) {
							Row.row46 =

							null;
						}
					} catch (java.lang.Exception e_tFileInputJSON) {
						whetherReject_tFileInputJSON = true;
						System.err.println(e_tFileInputJSON.getMessage());
						Row = null;
					}
					// }

					/**
					 * [tFileInputJSON begin ] stop
					 */

					/**
					 * [tFileInputJSON main ] start
					 */

					currentComponent = "tFileInputJSON";

					tos_count_tFileInputJSON++;

					/**
					 * [tFileInputJSON main ] stop
					 */

					/**
					 * [tFileInputJSON process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON";

					/**
					 * [tFileInputJSON process_data_begin ] stop
					 */
					// Start of branch "Row"
					if (Row != null) {

						/**
						 * [tFileOutputDelimited main ] start
						 */

						currentComponent = "tFileOutputDelimited";

						String[] rowtFileOutputDelimited = new String[47];
						rowtFileOutputDelimited[0] = Row.row0 == null ? null
								: Row.row0;
						rowtFileOutputDelimited[1] = Row.row1 == null ? null
								: Row.row1;
						rowtFileOutputDelimited[2] = Row.row2 == null ? null
								: Row.row2;
						rowtFileOutputDelimited[3] = Row.row3 == null ? null
								: Row.row3;
						rowtFileOutputDelimited[4] = Row.row4 == null ? null
								: Row.row4;
						rowtFileOutputDelimited[5] = Row.row5 == null ? null
								: Row.row5;
						rowtFileOutputDelimited[6] = Row.row6 == null ? null
								: Row.row6;
						rowtFileOutputDelimited[7] = Row.row7 == null ? null
								: Row.row7;
						rowtFileOutputDelimited[8] = Row.row8 == null ? null
								: Row.row8;
						rowtFileOutputDelimited[9] = Row.row9 == null ? null
								: Row.row9;
						rowtFileOutputDelimited[10] = Row.row10 == null ? null
								: Row.row10;
						rowtFileOutputDelimited[11] = Row.row11 == null ? null
								: Row.row11;
						rowtFileOutputDelimited[12] = Row.row12 == null ? null
								: Row.row12;
						rowtFileOutputDelimited[13] = Row.row13 == null ? null
								: Row.row13;
						rowtFileOutputDelimited[14] = Row.row14 == null ? null
								: Row.row14;
						rowtFileOutputDelimited[15] = Row.row15 == null ? null
								: Row.row15;
						rowtFileOutputDelimited[16] = Row.row16 == null ? null
								: Row.row16;
						rowtFileOutputDelimited[17] = Row.row17 == null ? null
								: Row.row17;
						rowtFileOutputDelimited[18] = Row.row18 == null ? null
								: Row.row18;
						rowtFileOutputDelimited[19] = Row.row19 == null ? null
								: Row.row19;
						rowtFileOutputDelimited[20] = Row.row20 == null ? null
								: Row.row20;
						rowtFileOutputDelimited[21] = Row.row21 == null ? null
								: Row.row21;
						rowtFileOutputDelimited[22] = Row.row22 == null ? null
								: Row.row22;
						rowtFileOutputDelimited[23] = Row.row23 == null ? null
								: Row.row23;
						rowtFileOutputDelimited[24] = Row.row24 == null ? null
								: Row.row24;
						rowtFileOutputDelimited[25] = Row.row25 == null ? null
								: Row.row25;
						rowtFileOutputDelimited[26] = Row.row26 == null ? null
								: Row.row26;
						rowtFileOutputDelimited[27] = Row.row27 == null ? null
								: Row.row27;
						rowtFileOutputDelimited[28] = Row.row28 == null ? null
								: Row.row28;
						rowtFileOutputDelimited[29] = Row.row29 == null ? null
								: Row.row29;
						rowtFileOutputDelimited[30] = Row.row30 == null ? null
								: Row.row30;
						rowtFileOutputDelimited[31] = Row.row31 == null ? null
								: Row.row31;
						rowtFileOutputDelimited[32] = Row.row32 == null ? null
								: Row.row32;
						rowtFileOutputDelimited[33] = Row.row33 == null ? null
								: Row.row33;
						rowtFileOutputDelimited[34] = Row.row34 == null ? null
								: Row.row34;
						rowtFileOutputDelimited[35] = Row.row35 == null ? null
								: Row.row35;
						rowtFileOutputDelimited[36] = Row.row36 == null ? null
								: Row.row36;
						rowtFileOutputDelimited[37] = Row.row37 == null ? null
								: Row.row37;
						rowtFileOutputDelimited[38] = Row.row38 == null ? null
								: Row.row38;
						rowtFileOutputDelimited[39] = Row.row39 == null ? null
								: Row.row39;
						rowtFileOutputDelimited[40] = Row.row40 == null ? null
								: Row.row40;
						rowtFileOutputDelimited[41] = Row.row41 == null ? null
								: Row.row41;
						rowtFileOutputDelimited[42] = Row.row42 == null ? null
								: Row.row42;
						rowtFileOutputDelimited[43] = Row.row43 == null ? null
								: Row.row43;
						rowtFileOutputDelimited[44] = Row.row44 == null ? null
								: Row.row44;
						rowtFileOutputDelimited[45] = Row.row45 == null ? null
								: Row.row45;
						rowtFileOutputDelimited[46] = Row.row46 == null ? null
								: Row.row46;
						nb_line_tFileOutputDelimited++;
						resourceMap.put("nb_line_tFileOutputDelimited",
								nb_line_tFileOutputDelimited);
						CsvWritertFileOutputDelimited
								.writeNext(rowtFileOutputDelimited);

						tos_count_tFileOutputDelimited++;

						/**
						 * [tFileOutputDelimited main ] stop
						 */

						/**
						 * [tFileOutputDelimited process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited";

						/**
						 * [tFileOutputDelimited process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited";

						/**
						 * [tFileOutputDelimited process_data_end ] stop
						 */

					} // End of branch "Row"

					/**
					 * [tFileInputJSON process_data_end ] start
					 */

					currentComponent = "tFileInputJSON";

					/**
					 * [tFileInputJSON process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON end ] start
					 */

					currentComponent = "tFileInputJSON";

				}
				globalMap.put("tFileInputJSON_NB_LINE", nb_line_tFileInputJSON);

				ok_Hash.put("tFileInputJSON", true);
				end_Hash.put("tFileInputJSON", System.currentTimeMillis());

				/**
				 * [tFileInputJSON end ] stop
				 */

				/**
				 * [tFileOutputDelimited end ] start
				 */

				currentComponent = "tFileOutputDelimited";

				if (CsvWritertFileOutputDelimited != null) {
					CsvWritertFileOutputDelimited.close();
				}

				globalMap.put("tFileOutputDelimited_NB_LINE",
						nb_line_tFileOutputDelimited);

				resourceMap.put("finish_tFileOutputDelimited", true);

				ok_Hash.put("tFileOutputDelimited", true);
				end_Hash.put("tFileOutputDelimited", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON finally ] start
				 */

				currentComponent = "tFileInputJSON";

				/**
				 * [tFileInputJSON finally ] stop
				 */

				/**
				 * [tFileOutputDelimited finally ] start
				 */

				currentComponent = "tFileOutputDelimited";

				if (resourceMap.get("finish_tFileOutputDelimited") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited");

					if (CsvWritertFileOutputDelimited != null) {
						CsvWritertFileOutputDelimited.close();
					}

				}

				/**
				 * [tFileOutputDelimited finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Shadow";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ShadowFileInputToDelimitedOutput ShadowFileInputToDelimitedOutputClass = new ShadowFileInputToDelimitedOutput();

		int exitCode = ShadowFileInputToDelimitedOutputClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ShadowFileInputToDelimitedOutput.class
					.getClassLoader().getResourceAsStream(
							"seminar/shadowfileinputtodelimitedoutput_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = ShadowFileInputToDelimitedOutput.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputJSONProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputJSON) {
			globalMap.put("tFileInputJSON_SUBPROCESS_STATE", -1);

			e_tFileInputJSON.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : ShadowFileInputToDelimitedOutput");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 79418 characters generated by Talend Open Studio for Data Integration on the
 * 14 janvier 2019 22:44:28 CET
 ************************************************************************************************/
